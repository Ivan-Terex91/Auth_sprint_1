swagger: "2.0"
info:
  description: "Best Auth Service"
  version: "1.0.0"
  title: "Auth Service"

basePath: "/api/v1"

tags:
- name: "auth"
  description: "Auth operations"
- name: "profile"
  description: "Operations with the user profile"
- name: "staff"
  description: "Operations with staff"
    
schemes:
- "http"

    
paths:
  /auth/signup/:
    post:
      tags:
      - "auth"
      summary: "Signup new user"
      description: "Signup in by email and password"
      operationId: "signup"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User email and password"
        required: true
        schema:
          $ref: "#/definitions/CreateUserModel"
      responses:
        "201":
          description: "Successfully signup in"
        "409":
          description: "The email you entered is already in use"
    
    
  /auth/login/:
    post:
      tags:
      - "auth"
      summary: "Login in user"
      description: "Login in by email and password"
      operationId: "login"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login user"
        required: true
        schema:
          $ref: "#/definitions/CreateUserModel"
      responses:
        "200":
          description: "Successfully logged in"
          schema:
            $ref: "#/definitions/TokensModel"
        "404":
          description: "User not found"
          
            
  /auth/logout/:
    get:
      tags:
      - "auth"
      summary: "Logout user"
      description: "Logout"
      operationId: "logout"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful logout"
          
          
  /auth/refresh/:
    get:
      tags:
      - "auth"
      summary: "Refresh token"
      description: "Getting new access and refresh tokens"
      operationId: "refresh"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Refresh token"
        required: true
        schema:
          $ref: "#/definitions/RefreshTokenModel"
      responses:
        "200":
          description: "Successfully getting new access and refresh tokens"
          schema:
            $ref: "#/definitions/TokensModel"
        "404":
          description: "Refresh token not found"
          
          
  /profile/{user_id}/:
    get:
      tags:
      - "profile"
      summary: "Getting profile user by id"
      description: "Get user profile"
      operationId: "GetProfileUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User uuid"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful getting profile"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
          
    put:
      tags:
      - "profile"
      summary: "Change profile user by id"
      description: "Update user profile"
      operationId: "UpdateProfileUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User uuid"
        required: true
        type: "string"
        format: "uuid"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successfully updated user profile"
        "404":
          description: "User not found"
      
          
    delete:
      tags:
      - "profile"
      summary: "Delete profile user"
      description: "Delete user profile"
      operationId: "DeleteProfileUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User uuid"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "204":
          description: "successfully deleted user profile"
        "404":
          description: "User not found"
          

  /profile/{user_id}/history/:
    get:
      tags:
      - "profile"
      summary: "Getting the user's login history"
      description: "User login history"
      operationId: "User History"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User uuid"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful getting history"
          schema:
            type: array
            items:
              $ref: "#/definitions/HistoryModel"
        "404":
          description: "User not found"      


  /profile/{user_id}/change_password/:
    patch:
      tags:
      - "profile"
      summary: "Change user password"
      description: "Change password"
      operationId: "updateUserPassword"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User uuid"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "User old and new password"
        required: true
        schema:
          $ref: "#/definitions/ChangeUserPasswordModel"
      responses:
        "200":
          description: "successful change password"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
          
    
  /staff/validate/:
    post:
      tags:
      - "staff"
      summary: "Staff method for validate access token"
      description: "Validate access token"
      operationId: "validateAccessToken"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "access_token"
        description: "Access token"
        required: true
        schema:
          $ref: "#/definitions/AccessTokenModel"
      responses:
        "200":
          description: "Access token is valid"
        "404":
          description: "Access token is invalid"
  
          
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        readOnly: true
      first_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"
        format: "email"

      
  CreateUserModel:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        format: "email"
        example: "test@test.ru"
      password:
        type: "string"
        example: "password"
        minLength: 6
        maxLength: 20
      
        
  ChangeUserPasswordModel:
    type: "object"
    required:
    - "old_password"
    - "new_password"
    - "new_password_again"
    properties:
      old_password:
        type: "string"
        format: "password"
        example: "old_password"
        minLength: 6
        maxLength: 20
      new_password:
        type: "string"
        format: "password"
        example: "new_password"
        minLength: 6
        maxLength: 20
      new_password_again:
        type: "string"
        format: "password"
        example: "new_password"
        minLength: 6
        maxLength: 20
        
        
  TokensModel:
    type: "object"
    properties:
      access_token:
        type: "string"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiODA5OTEwMDIwMzAiLCJleHBpcmVBdCI6MTUxNjIzOTAyMiwicm9sZSI6InN1YnNjcmliZXIifQ.MyXHl4ZbvRNwdZI8BEWDxJXBRAGJ3sf8rcpSMhG0HtY"
      refresh_token:
        type: "string"
        example: "1eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
  
  
  RefreshTokenModel:
    type: "object"
    properties:
      refresh_token:
        type: "string"
        example: "1eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
        
        
  AccessTokenModel:
    type: "object"
    properties:
      access_token:
        type: "string"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiODA5OTEwMDIwMzAiLCJleHBpcmVBdCI6MTUxNjIzOTAyMiwicm9sZSI6InN1YnNjcmliZXIifQ.MyXHl4ZbvRNwdZI8BEWDxJXBRAGJ3sf8rcpSMhG0HtY"
        
        
  HistoryModel:
    type: "object"
    properties:
      datetime:
        type: "string"
        format: "datetime"
        example: "05-18-2021 13:23:00 GMT"
      action:
        type: "string"
        example: "login"
      user_agent:
        type: "string"
        example: "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:88.0) Gecko/20100101 Firefox/88.0"
      user_device_type:
        type: "string"
        example: "desktop"
  
